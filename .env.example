# Setup flow:
# 1. Create a bot with @BotFather in Telegram client.
# 2. Fill TELEGRAM_BOT_TOKEN in this config and start the service (sudo systemctl restart linux-telegram-monitor)
# 3. Connect to the bot in the Telegram client app and type /start.
# 4. The bot will respond with your chat id.
# 5. Fill TELEGRAM_BOT_CHAT_ID here and restart this service (sudo systemctl restart linux-telegram-monitor).
# 6. Use /start or /cpu_mem_usage commands to test that the bot responds.

TELEGRAM_BOT_TOKEN=
TELEGRAM_BOT_THREAD_ID=
TELEGRAM_BOT_CHAT_ID=

# The config below can be left as is.

# Frequency of checking for CPU/Memory usage in seconds, float.
# Better don't set to less than a second because proper measuring the CPU usage needs ~1 second.
CHECK_EVERY_SEC=5

# When avg CPU usage across all cores exceeds this percent, a message is sent to the Telegram chat
CPU_USAGE_PERC_THRESHOLD=80

# When RAM usage exceeds this percent, a message is sent to the Telegram chat
MEM_USAGE_PERC_THRESHOLD=80

# List of log files to monitor, separated by: ";"
# Any line written to one of these files will be sent to Telegram.
# /var/log/auth.log can be used to monitor logins and sudo operations
TAIL_LOG_FILES=/var/log/auth.log

# Regexp pattern to exclude lines reported from the tracked log files.
# Example: Can be used to avoid seeing cron jobs logins in auth.log.
# Use aaa|bbb|ccc format to implement "or" behaviour.
# Use regex101.com or a similar service for debugging the template
# (copy unneeded notification from Telegram -> copy it to regex101 -> find proper regexp -> copy it here).
# Used as: r = re.compile(TAIL_LOG_FILES_LINE_EXCLUDE_REGEXP), r.search(line)
TAIL_LOG_FILES_LINE_EXCLUDE_REGEXP=cron:session
